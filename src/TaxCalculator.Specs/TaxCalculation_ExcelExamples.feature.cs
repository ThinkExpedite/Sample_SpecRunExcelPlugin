// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18408
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TaxCalculator.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Tax Calculation (Excel Examples)", new string[] {
            "excel-examples",
            "external-source"}, SourceFile="TaxCalculation_ExcelExamples.feature", SourceLine=1)]
    public partial class TaxCalculationExcelExamplesFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "TaxCalculation_ExcelExamples.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Tax Calculation (Excel Examples)", "", ProgrammingLanguage.CSharp, new string[] {
                        "excel-examples",
                        "external-source"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void EmplyeeWithoutChildren(string gross, string net, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Emplyee without children", exampleTags);
#line 4
this.ScenarioSetup(scenarioInfo);
#line 5
 testRunner.Given(string.Format("the monthly gross salary of the employee is {0}", gross), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 6
 testRunner.And("there are no children in the family", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 7
 testRunner.When("the tax is calculated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 8
 testRunner.Then(string.Format("the monthly net salary of the employee should be {0}", net), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Emplyee without children, 100000", new string[] {
                "source:TaxCalculation_ExcelExamples.xlsx"})]
        public virtual void EmplyeeWithoutChildren_100000()
        {
            this.EmplyeeWithoutChildren("100000", "65500", new string[] {
                        "source:TaxCalculation_ExcelExamples.xlsx"});
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Emplyee without children, 200000", new string[] {
                "source:TaxCalculation_ExcelExamples.xlsx"})]
        public virtual void EmplyeeWithoutChildren_200000()
        {
            this.EmplyeeWithoutChildren("200000", "131000", new string[] {
                        "source:TaxCalculation_ExcelExamples.xlsx"});
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Emplyee without children, 300000", new string[] {
                "source:TaxCalculation_ExcelExamples.xlsx"})]
        public virtual void EmplyeeWithoutChildren_300000()
        {
            this.EmplyeeWithoutChildren("300000", "196500", new string[] {
                        "source:TaxCalculation_ExcelExamples.xlsx"});
        }
        
        public virtual void EmployeeWoChildren_Details(string gross, string net, string contributions, string incomeTax, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Employee wo children - details", exampleTags);
#line 14
this.ScenarioSetup(scenarioInfo);
#line 15
 testRunner.Given(string.Format("the monthly gross salary of the employee is {0}", gross), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 16
 testRunner.And("there are no children in the family", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 17
 testRunner.When("the tax is calculated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 18
 testRunner.Then(string.Format("the monthly net salary of the employee should be {0}", net), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Social Security Contributions",
                        "Income Tax"});
            table1.AddRow(new string[] {
                        string.Format("{0}", contributions),
                        string.Format("{0}", incomeTax)});
#line 19
 testRunner.And("the following taxes are paid by the employee", ((string)(null)), table1, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Employee wo children - details, 100000", new string[] {
                "source:TaxCalculation_ExcelExamples.xlsx"}, SourceLine=25)]
        public virtual void EmployeeWoChildren_Details_100000()
        {
            this.EmployeeWoChildren_Details("100000", "65500", "18000", "16000", new string[] {
                        "source:TaxCalculation_ExcelExamples.xlsx"});
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Employee wo children - details, 200000", new string[] {
                "source:TaxCalculation_ExcelExamples.xlsx"})]
        public virtual void EmployeeWoChildren_Details_200000()
        {
            this.EmployeeWoChildren_Details("200000", "131000", "37000", "32000", new string[] {
                        "source:TaxCalculation_ExcelExamples.xlsx"});
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Employee wo children - details, 300000", new string[] {
                "source:TaxCalculation_ExcelExamples.xlsx"})]
        public virtual void EmployeeWoChildren_Details_300000()
        {
            this.EmployeeWoChildren_Details("300000", "196500", "55500", "48000", new string[] {
                        "source:TaxCalculation_ExcelExamples.xlsx"});
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Employee wo children - details, 500000", new string[] {
                "source:TaxCalculation_ExcelExamples.xlsx"})]
        public virtual void EmployeeWoChildren_Details_500000()
        {
            this.EmployeeWoChildren_Details("500000", "327500", "92500", "80000", new string[] {
                        "source:TaxCalculation_ExcelExamples.xlsx"});
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
